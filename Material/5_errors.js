/*
ОШИБКИ

Ошибки - это специальный механизм, позволяющий сообщить о критических ситуациях,
сбоях или о невозможности продолжить программу из-за недостаточности данных

Разделяют ошибки на 2 типа:
1) Системые - возникают из-за конфликта программы с внешними программами (например операционной 
    системой (ОС) или при подключении к некоторым БД) или во время исполнения программы возникла
    логическая ошибка (запрос свойства у переменной которая undefined)
2) Пользовательские - возникают и создаются программистом для предупреждении о некорректных
    данных или недостаточно данных для продолжения и др.

Ошибки служат как стоп-кран в поезде, пресеч выполнение работы из-за невозможности ее продолжить
по определенной причине. 
Многие библиотеки сами создают ошибки для сообщения о неполадках в работе. В качестве сообщения
в ошибке описывается причина или следствие возникновения.

Итог: 
    * Ошибки помогают прервать заведомо неправильную ветвь кода.
    * Программисты понимают когда функция/код работают корректно, а когда все пошло не по плану

Пример объявления:
*/
let meError = new Error('Пример ошибки');


/*
Сам термин ошибка обычно не употребляется в одиночку, потому как создание ошибки не приводит 
к изменению ветки кода. Поэтому она употребляется в зависимости от поведения.

1) Выбросить/пробросить/выкинуть ошибку - то есть не просто создать ошибку, а начать процесс немедленного 
прерывания кода программы.

2) Обработать ошибку - то есть произвести обработку ошибки
Примеры:
*/
//  1. Как произвести проброс ошибки? для этого есть ключевое слово throw
//  Данное слово позволяет начать процесс пробросить ошибку
throw meError;

//  2. Как обработать ошибку? Обработка ошибок осуществляется с помощью блока
//  try {} catch() {}. Именно catch занимается обработкой ошибок, как части системных
//  так и всех пользовательских. Но он обрабатывает только те, которые находятся внутри
//  блока try. Если внутри блока try, есть функция, внутри которой есть ошибка, то try
//  хоть и находящийся в другом блоке кода перехватит его. Вложенность try-catch
//  может быть любой, главное, ошибку перехватит первый на пути у ошибки.

//  Пример:
try {
    throw new Error('Попробуй поймать');
} catch (err) {
    console.log(`${err.message}\n-Поймал`);
}

//  Пример с функцией
function mayBeError() {
    throw new Error('я ошибка из функции mayBeError');
}

try {
    mayBeError();
} catch (err) {
    console.log(err.message);
}

//  Пример с вложенностью
function text(i) {
    return `я ошибка ${i}-ого уровня`;
}

try {
    try {
        try {
            throw new Error(text(1));
        } catch (err3) {
            console.log(err3.message);
            throw new Error(text(2));
        }
    } catch (err2) {
        console.log(err2.message);
        throw new Error(text(3));
    }
} catch (err1) {
    console.log(err1.message);
}

//  Главный вопрос когда применять этот механизм.
/*
1. Когда есть понимание, что для выполнение дальнейшей работы не хватает данных
2. Когда значение какой либо переменной является не корректным по отношению 
    к дальнейшему коду и могут вызвать некорректное поведение.
3. Когда значение выбивается из допустимых значений как точки зрения программы,
    так и с точки зрения логики выполнения
4. Когда необходимо вернуться в место, где можно завершить данную ветку кода
    либо в место, где можно сообщить пользователю о возникшей неполадке
*/